# Day 07

## Parsing Input

```elixir
input = File.read!("inputs/d07") |> String.trim_trailing() |> String.split("\n")
```

```elixir
test_input =
  """
  $ cd /
  $ ls
  dir a
  14848514 b.txt
  8504156 c.dat
  dir d
  $ cd a
  $ ls
  dir e
  29116 f
  2557 g
  62596 h.lst
  $ cd e
  $ ls
  584 i
  $ cd ..
  $ cd ..
  $ cd d
  $ ls
  4060174 j
  8033020 d.log
  5626152 d.ext
  7214296 k
  """
  |> String.trim_trailing()
  |> String.split("\n")
```

```elixir
defmodule D07 do
  @p1_limit 100_000
  @total_disk_space 70_000_000
  @required_free_space 30_000_000

  def parse_input(input) do
    {dir_sizes, _path, _state} = Enum.reduce(input, {%{}, [], nil}, &parse_line/2)
    dir_sizes
  end

  def parse_line("$ cd ..", {dir_sizes, [_curr_dir | path], _state}) do
    {dir_sizes, path, nil}
  end

  def parse_line("$ ls", {dir_sizes, path, nil}) do
    {dir_sizes, path, :ls}
  end

  def parse_line(<<"$ cd "::binary, target_dir::binary>>, {dir_sizes, path, _state}) do
    {dir_sizes, [target_dir | path], nil}
  end

  # TODO: should we skip here?
  def parse_line(<<"dir "::binary, _dir_name::binary>>, {dir_sizes, path, :ls}) do
    {dir_sizes, path, :ls}
  end

  def parse_line(file_size_and_name, {dir_sizes, path, :ls}) do
    [file_size, _filename] = String.split(file_size_and_name)
    {file_size, ""} = Integer.parse(file_size)

    # ["a", "b", "/"] => "/b/a"
    {dir_sizes, []} =
      Enum.reduce(
        path,
        {dir_sizes, path},
        fn dir_name, {dir_sizes, [dir_name | rest] = full_path} ->
          full_dir_name = full_path |> Enum.reverse() |> Enum.join("|")

          dir_sizes =
            Map.update(
              dir_sizes,
              full_dir_name,
              file_size,
              fn prev_dir_size -> prev_dir_size + file_size end
            )

          {dir_sizes, rest}
        end
      )

    {dir_sizes, path, :ls}
  end

  def p1(dir_sizes) when is_map(dir_sizes) do
    Enum.map(dir_sizes, fn {_dir_name, size} ->
      if size <= @p1_limit, do: size, else: 0
    end)
    |> Enum.sum()
  end

  def p2(dir_sizes) when is_map(dir_sizes) do
    curr_free_space = @total_disk_space - dir_sizes["/"]
    need_to_free = @required_free_space - curr_free_space

    dir_sizes
    |> Enum.filter(fn {_dir_name, dir_size} -> dir_size >= need_to_free end)
    |> Enum.sort_by(fn {_dir_name, dir_size} -> dir_size end, :asc)
    |> hd()
    |> elem(1)
  end
end
```

```elixir
dir_sizes = D07.parse_input(test_input)
```

```elixir
need_to_free = D07.p2(dir_sizes)
```

```elixir
D07.p2(dir_sizes)
```

```elixir
# 95437
dir_sizes |> D07.p1()
```

```elixir
# 1447046 is right
D07.parse_input(input) |> D07.p1()
```

```elixir
D07.parse_input(input) |> D07.p2()
```

```elixir
# 170
input
|> Enum.filter(fn x -> String.starts_with?(x, "dir") end)
|> MapSet.new()
|> MapSet.size()
```

```elixir
# %{"dir_name" => size1, "dir_name2" => size2, ...}

# {
#   {:dir, "/"},
#   [
#     {{:dir, "a"}, [...]},
#     {{:dir, "b"}, [...]},
#     {:file, "yo", 1212898},
#     ...
#   ]
# }
```
